@{
	Layout = "layout.cshtml";
}
@section Javascript {
    <script>
        function ripperViewModel(progress) {
            var self = this;
            self.progress = ko.observable();
            if (progress) {
                self.progress(progress);
            }

            self.isRipping = ko.computed(function() {
                return self.progress() != null;
            });

            self.onRippingProgress = function(trackNumber, percentageComplete) {
                self.progress().Tracks()[trackNumber - 1].PercentageComplete(percentageComplete);
            };

            self.onStatusChanged = function(currentStatus) {
                if (currentStatus) {
                    self.progress(new progressViewModel(currentStatus));
                } else {
                    self.progress(null);
                }
            };

            self.onSetTestData = function() {
                self.onStatusChanged({
                    AlbumTitle: "Title",
                    AlbumArtist: "Artist",
                    Tracks: [
                        {
                            TrackNumber: 1,
                            Title: "track 1",
                            Artist: "Artist",
                            PercentageComplete: 0
                        }
                    ]
                });
            };
        }

        function progressViewModel(progress) {
            var self = this;
            self.AlbumTitle = progress.AlbumTitle;
            self.AlbumArtist = progress.AlbumArtist;
            self.Tracks = ko.observableArray();

            for (var i = 0; i < progress.Tracks.length; i++) {
                self.Tracks.push(new trackViewModel(progress.Tracks[i]));
            }
        }

        function trackViewModel(track) {
            var self = this;
            self.TrackNumber = track.TrackNumber;
            self.Title = track.Title;
            self.Artist = track.Artist;
            self.PercentageComplete = ko.observable(track.PercentageComplete);
        }

        var viewModel;

        $(function() {
            viewModel = new ripperViewModel(@Html.Raw(Model.View));
            ko.applyBindings(viewModel);

            var ripperHub = $.connection.ripperNotificationHub;
            ripperHub.client.onRippingProgress = viewModel.onRippingProgress;
            ripperHub.client.onStatusChanged = viewModel.onStatusChanged;
            $.connection.hub.start()
                .done(function() { console.log('Now connected, connection ID=' + $.connection.hub.id); })
                .fail(function() { console.log('Could not Connect!'); });;
        });
    </script>
}
Ripper!<br />

<div data-bind="if: isRipping">
    <p>Current CD: <strong data-bind="text: progress().AlbumTitle"></strong> by <strong data-bind="text: progress().AlbumArtist"></strong></p>
    <table>
        <thead>
            <tr>
                <th>#</th>
                <th>Artist</th>
                <th>Title</th>
                <th>Progress</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: progress().Tracks">
            <tr>
                <td data-bind="text: TrackNumber"></td>
                <td data-bind="text: Artist"></td>
                <td data-bind="text: Title"></td>
                <td style="border: 1px solid black;">
                    <div style="background-color: greenyellow;" data-bind="text: PercentageComplete, style: {width: PercentageComplete() + '%' }"></div>
                </td>
            </tr>
        </tbody>
    </table>
</div>
<div data-bind="ifnot: isRipping">
    <p>No disc currently inserted</p>
</div>
<div>
    <button data-bind="click: onSetTestData">Add TestData</button>
</div>